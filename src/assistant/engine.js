import fs from 'fs';import path from 'path';import fetch from 'node-fetch';import YAML from 'yaml';import { fileURLToPath } from 'url';import { classifyIntent } from './intent-classifier.js';import { execute } from './function-registry.js';const __dirname=path.dirname(fileURLToPath(import.meta.url));const promptsPath=path.resolve(__dirname,'../../../../','docs','prompts.yaml');const kbPath=path.resolve(__dirname,'../../../../','docs','ground-truth.json');const config=YAML.parse(fs.readFileSync(promptsPath,'utf8'));const knowledgeBase=JSON.parse(fs.readFileSync(kbPath,'utf8'));function findPolicies(q){q=(q||'').toLowerCase();const map=config.categoryKeywords||{};let cat=null;for(const[c,keys]of Object.entries(map)){if(keys.some(k=>q.includes(k))){cat=c;break;}}return cat?knowledgeBase.filter(p=>p.category===cat):[];}function validate(text){const ids=Array.from((text||'').matchAll(/\[(Policy\d+\.\d+)\]/g)).map(m=>m[1]);const known=new Set(knowledgeBase.map(p=>p.id));const invalid=ids.filter(id=>!known.has(id));return{isValid:invalid.length===0,cited:ids,invalid};}export async function handleAssistantQuery(userText){const intent=classifyIntent(userText);const sys=config.identity?.system||'';if(intent==='policy_question'){const policies=findPolicies(userText);const bullets=policies.map(p=>`- ${p.answer} [${p.id}]`).join('\n');const prompt=`${sys}\nUser question: ${userText}\nRelevant policies:\n${bullets}\nAnswer succinctly and cite [PolicyID].`;const resp=await fetch(`${process.env.LLM_BASE_URL}/generate`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({prompt,max_tokens:300})});const data=await resp.json();return{ text:data.text,intent,citations:validate(data.text||'') };}if(intent==='order_status'){const m=userText.match(/[A-Za-z0-9-]{8,}/);if(!m)return{text:'Please share your order ID so I can check its status.',intent};const { orderId,status,eta,error }=await execute('getOrderStatus',{orderId:m[0]});if(error)return{text:'I could not find that order. Double-check the ID and try again.',intent};return{ text:`Order ${orderId} is **${status}**. ETA: ${new Date(eta).toDateString()}.`,intent,functionsCalled:['getOrderStatus']};}if(intent==='product_search'){const query=userText.replace(/(do you have|sell|price|stock|available|search|looking for)/ig,'').trim()||userText;const { items }=await execute('searchProducts',{query,limit:5});if(!items?.length)return{ text:'No matching products yet—try a different keyword?',intent,functionsCalled:['searchProducts']};const list=items.map(i=>`• ${i.name} — $${i.price}`).join('\n');return{ text:`Here are some matches:\n${list}`,intent,functionsCalled:['searchProducts']};}if(intent==='complaint')return{ text:'I’m sorry this hasn’t gone right. Please share your email or order ID and I’ll make it right.',intent};if(intent==='chitchat')return{ text:'Hey! I can help with orders, products, or policies. What do you need today?',intent};if(intent==='violation')return{ text:'I can’t assist with abusive or inappropriate requests. I’m happy to help respectfully.',intent};return{ text:'Ask me about products, orders, or store policies.',intent};}