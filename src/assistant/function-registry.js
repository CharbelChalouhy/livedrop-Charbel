import { connectDB, collections } from '../db.js';const registry=new Map();export function register(name,schema,fn){registry.set(name,{schema,fn});}export function getAllSchemas(){return Array.from(registry.entries()).map(([name,{schema}])=>({name,schema}));}export async function execute(name,args){if(!registry.has(name))throw new Error('function_not_found');return registry.get(name).fn(args);}register('getOrderStatus',{type:'object',properties:{orderId:{type:'string'}},required:['orderId']},async({orderId})=>{const db=await connectDB();const{orders}=collections(db);const order=await orders.findOne({_id:orderId});if(!order)return{error:'not_found'};return{orderId,status:order.status,eta:order.estimatedDelivery};});register('searchProducts',{type:'object',properties:{query:{type:'string'},limit:{type:'number'}},required:['query']},async({query,limit=5})=>{const db=await connectDB();const{products}=collections(db);const items=await products.find({name:{$regex:query,$options:'i'}}).limit(limit).toArray();return{items};});register('getCustomerOrders',{type:'object',properties:{email:{type:'string'}},required:['email']},async({email})=>{const db=await connectDB();const{customers,orders}=collections(db);const user=await customers.findOne({email:email.toLowerCase()});if(!user)return{error:'customer_not_found'};const list=await orders.find({customerId:user._id}).sort({createdAt:-1}).toArray();return{customer:user,orders:list};});