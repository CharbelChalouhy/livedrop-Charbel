import { connectDB, collections } from '../db.js';const FLOW=['PENDING','PROCESSING','SHIPPED','DELIVERED'];const delays={PROCESSING:[3000,5000],SHIPPED:[5000,7000],DELIVERED:[5000,7000]};const jitter=([min,max])=>Math.floor(Math.random()*(max-min+1))+min;export default async function orderStatusSSE(req,res){const orderId=req.params.id;const db=await connectDB();const{orders}=collections(db);const order=await orders.findOne({_id:orderId});if(!order){res.status(404).end();return;}res.writeHead(200,{'Content-Type':'text/event-stream','Cache-Control':'no-cache',Connection:'keep-alive'});const send=(event,data)=>{res.write(`event: ${event}\n`);res.write(`data: ${JSON.stringify(data)}\n\n`);};let idx=Math.max(0,FLOW.indexOf(order.status));send('status',{status:FLOW[idx],orderId});let closed=false;req.on('close',()=>closed=true);async function advance(){if(closed)return;if(FLOW[idx]==='DELIVERED'){res.end();return;}const next=FLOW[idx+1];await orders.updateOne({_id:orderId},{ $set:{ status:next,updatedAt:new Date()}});send('status',{status:next,orderId});idx++;if(FLOW[idx]==='DELIVERED'){setTimeout(()=>res.end(),500);return;}setTimeout(advance,jitter(delays[FLOW[idx+1]]||[4000,6000]));}setTimeout(advance,jitter(delays[FLOW[idx+1]]||[3000,5000]));}